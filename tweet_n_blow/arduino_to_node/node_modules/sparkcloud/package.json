{
  "author": {
    "name": "Franklin van de Meent",
    "email": "fr@nkl.in",
    "url": "https://frankl.in"
  },
  "name": "sparkcloud",
  "description": "Read and control Spark.io cores with node.js",
  "version": "0.3.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/fvdm/nodejs-spark.git"
  },
  "bugs": {
    "url": "https://github.com/fvdm/nodejs-spark/issues"
  },
  "main": "spark.js",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "keywords": [
    "spark",
    "spark.io",
    "sparkcore",
    "sparkcloud",
    "api"
  ],
  "license": {
    "type": "Public Domain",
    "url": "https://github.com/fvdm/nodejs-spark/raw/master/LICENSE"
  },
  "readme": "nodejs-spark\n============\n\nRead and control your Spark Core with node.js using the Spark Cloud API.\n\n\nBeta software\n-------------\n\nThe Spark Cloud platform is still a work-in-progress and so is this module for Node. Some things are not working smoothly yet.\n\n\nInstallation\n------------\n\nThe version on npm is the most stable code:\n\n```sh\nnpm install sparkcloud\n```\n\nThe code on Github should work fine but can be unstable:\n\n```sh\nnpm install git+https://github.com/fvdm/nodejs-spark\n```\n\n\nInitial setup\n-------------\n\nWhen you load the module into your script you must provide the `access_token` from your account settings.\n\n```js\nvar spark = require('sparkcloud')('your_access_token')\n```\n\nOptionally you can override the default HTTP request timeout of 10 seconds, in milliseconds:\n\n```js\n// set timeout to 30 seconds\nvar spark = require('sparkcloud')('your_access_token', 30000)\n```\n\n\nCallback & errors\n-----------------\n\nThe last parameter of each method must be the callback _function_. This is the only way to receive results as the functions themselves don't return anything.\n\n```js\nfunction myCallback( err, data ) {\n  if( ! err ) {\n    console.log( 'We got data: ', data )\n  } else {\n    console.log( err, err.stack )\n  }\n}\n```\n\nThe first parameter `err` is `null` when all went fine, otherwise it is an `instanceof Error`. Depending on the kind of error it may have additional properties to further explain the problem. In case of an error `data` is usually `null`.\n\n\n### Errors\n\n```\nrequest failed    The HTTPS request had an error, see err.error.\nrequest timeout   The HTTPS request took too long.\nrequest dropped   The remote host disconnected too early, no data processed.\napi invalid       The API returned unreadable data.\napi error         The API returned an error, see err.code, err.error and err.error_description.\naction failed     A method specific error occured, it returned the code -1.\n```\n\n\ndevices ( callback )\n--------------------\n\nList all cores linked to your account.\n\n```js\nspark.devices( console.log )\n```\n\n```js\n[ { id: '123456789',\n    name: 'myCore',\n    last_app: null,\n    connected: true } ]\n```\n\n\ndevice ( deviceId )\n-------------------\n\nGet core specific methods.\n\n```js\nvar core = spark.device('123456789')\n```\n\nReturns device methods below, no callback.\n\n\ndevice.info ( callback )\n------------------------\n\nGet basic information about a core including its functions and variables.\n\n```js\ncore.info( console.log )\n```\n\n```js\n{ id: '123456789',\n  name: 'myCore',\n  variables: { ledState: 'int32' },\n  functions: [ 'led' ] }\n```\n\n\ndevice.variable ( varName, callback )\n-------------------------------------\n\nRead a variable from the core.\n\n```js\ncore.variable( 'light', console.log )\n```\n\n```js\n{ cmd: 'VarReturn',\n  name: 'light',\n  TEMPORARY_allTypes: \n   { string: '\\u0000\\u0000\\u0001�',\n     uint32: 478,\n     number: 478,\n     double: null,\n     float: 6.6982066594726256e-43,\n     raw: '\\u0000\\u0000\\u0001�' },\n  result: 478,\n  coreInfo: \n   { last_app: '',\n     last_heard: '2014-01-11T01:55:15.241Z',\n     connected: true,\n     deviceID: '123456789' } }\n```\n\n\ndevice.func ( functionName, [param], callback )\n-----------------------------------------------\n\nRun a function on the core. Optionally include one parameter.\n\n```js\ncore.func( 'switchLight', '1', console.log )\n```\n\n```js\n{ id: '123456789',\n  name: 'myCore',\n  last_app: null,\n  connected: true,\n  return_value: 1 }\n```\n\n\nExample\n-------\n\nIf you send the following code to you Spark core, the javascript example should work fine.\n\n\n### Spark code\n\n```arduino\nint LED = D7;\nint State = 0;\n\nvoid setup() {\n    pinMode(LED, OUTPUT);\n    Spark.function(\"led\", switchLED);\n    Spark.variable(\"ledState\", &State, INT);\n}\n\nvoid loop() {}\n\nint switchLED(String args) {\n    digitalWrite(LED, State == 1 ? LOW : HIGH);\n    return State = State == 1 ? 0 : 1;\n}\n```\n\n\n### Node javascript\n\n```js\nvar spark = require('sparkcloud')('your_access_token')\nvar core = spark.device('123456789')\n\ncore.func( 'led', console.log )\n```\n\nEach time you run this script the **blue LED** next to the big RGB LED should switch on or off.\n\n\nEnjoy!\n\n\nUnlicense (Public Domain)\n-------------------------\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>\n",
  "readmeFilename": "README.md",
  "_id": "sparkcloud@0.3.0",
  "_from": "sparkcloud@"
}
